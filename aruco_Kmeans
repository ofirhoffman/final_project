from skimage import io, filters, feature, img_as_float, img_as_ubyte,measure,util,color
from skimage.color import label2rgb, rgb2gray
import skimage
import matplotlib.pyplot as plt
import cv2
import numpy as np
import imutils

#read image
img = io.imread('/content/drive/MyDrive/image_processing/images/AruCo_1.jpg')

#set aruco parameters
parameters = cv2.aruco.DetectorParameters_create()
aruco_dict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_5X5_50)

#detect aruco marker
corners, _, _ = cv2.aruco.detectMarkers(img, aruco_dict, parameters=parameters)

#draw polyline around marker
int_corners = np.int0(corners)
cv2.polylines(img, int_corners, True, (0, 255, 0), 0)

#find area of marker
aruco_area = cv2.contourArea (corners[0])

#fill marker area with black
cv2.fillPoly(img, pts =[int_corners[0][0]], color=(0,0,0))

#calculate pixel to cm ratio
pixel_cm_ratio = 5*5 / aruco_area

#show image
plt.imshow(img)

#reshape image for k-means clustering
pixel_values  = img.reshape((-1,3)) 
pixel_values = np.float32(pixel_values)
img.reshape((-1,3)).shape 

#set k-means clustering parameters
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.2)
k = 3
attempts = 10

#apply k-means clustering
_, labels, (centers) = cv2.kmeans(pixel_values, k, None, criteria, attempts, cv2.KMEANS_RANDOM_CENTERS)

#convert centers to uint8
centers = np.uint8(centers)

#flatten labels
labels = labels.flatten()

#segment image
segmented_image = centers[labels.flatten()]
segmented_image = segmented_image.reshape(img.shape)

#find the median color on the image (the leaf)
lst = list(np.median(centers,axis = 0))
result_1 = [int(item) for item in lst]

#find index of the leaf row in centers
for i,center in enumerate(centers):
  if np.all(center == (result_1)):
    leaf_center_index = i

#create a copy of image for masking
masked_image = img.copy()

#reshape image for masking
masked_image = masked_image.reshape((-1, 3))

#create list of cluster numbers to exclude
list_of_cluster_numbers_to_exclude = list(range(k)) 
#remove marker cluster from the list
list_of_cluster_numbers_to_exclude.remove(leaf_center_index)  

#set pixels in excluded clusters to black
for cluster in list_of_cluster_numbers_to_exclude:
  masked_image[labels== cluster] = [0, 0, 0] 

# reshape image back to original shape
masked_image = masked_image.reshape(img.shape)

#show the masked image
plt.imshow(masked_image)

#convert image to grayscale
masked_image_grayscale = rgb2gray(masked_image)

#count number of leaf pixels
leaf_count = np.sum(np.array(masked_image_grayscale) >0)
#count number of background pixels
bg_count = np.sum(np.array(masked_image_grayscale) ==0)

#print leaf pixel count and leaf area
print('Leaf px count:', leaf_count, 'px')
print('Area:', leaf_count*pixel_cm_ratio, 'cm\N{SUPERSCRIPT TWO},', 'which is:',  f'{0.0001*leaf_count*pixel_cm_ratio:.3f}', 'm\N{SUPERSCRIPT TWO}')

